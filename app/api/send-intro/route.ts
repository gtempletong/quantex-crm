/**
 * API Route: /api/send-intro
 * Env√≠a email de introducci√≥n llamando directamente a las herramientas del modular agent
 * (sin usar el LLM planner para evitar problemas de paso de datos entre herramientas)
 */

import { NextResponse } from 'next/server';
import { getServerSupabase } from '@/lib/supabase';

export async function POST(request: Request) {
  try {
    const { contactId, contactName } = await request.json();

    if (!contactId || !contactName) {
      return NextResponse.json(
        { error: 'contactId y contactName son requeridos' },
        { status: 400 }
      );
    }

    console.log(`üìß Enviando email intro a: ${contactName} (ID: ${contactId})`);
    console.log(`üìã Tipo de contactId: ${typeof contactId}`);

    // 1. Buscar datos del contacto en Supabase
    const supabase = getServerSupabase();
    console.log(`üîç Buscando contacto con ID: ${contactId}`);
    
    const { data: persona, error: personaError } = await supabase
      .from('personas')
      .select('*')
      .eq('id', contactId)
      .single();
    
    console.log(`üìä Resultado de b√∫squeda:`, { persona, personaError });

    if (personaError || !persona) {
      throw new Error('No se encontr√≥ el contacto en la base de datos');
    }

    if (!persona.email_contacto) {
      throw new Error('El contacto no tiene email registrado');
    }

    console.log(`  ‚úÖ Contacto encontrado: ${persona.nombre_contacto} - ${persona.email_contacto}`);

    // 1.1. Buscar datos de la empresa si existe
    let razonSocial = '';
    if (persona.rut_empresa) {
      const { data: empresa } = await supabase
        .from('empresas')
        .select('razon_social')
        .eq('rut_empresa', persona.rut_empresa)
        .single();
      
      if (empresa) {
        razonSocial = empresa.razon_social;
      }
    }

    // 1.2. Extraer solo el primer nombre (manejar nombres compuestos)
    const extractFirstName = (fullName: string): string => {
      if (!fullName) return '';
      
      const name = fullName.trim();
      const words = name.split(/\s+/);
      
      if (words.length === 1) return words[0];
      
      // Nombres compuestos comunes en espa√±ol
      const compoundNames = [
        'juan pablo', 'mar√≠a jes√∫s', 'jos√© luis', 'mar√≠a elena', 'jos√© mar√≠a',
        'mar√≠a jos√©', 'jos√© antonio', 'mar√≠a carmen', 'jos√© carlos', 'mar√≠a teresa',
        'jos√© manuel', 'mar√≠a pilar', 'jos√© miguel', 'mar√≠a dolores', 'jos√© francisco',
        'mar√≠a √°ngeles', 'jos√© ram√≥n', 'mar√≠a isabel', 'jos√© enrique', 'mar√≠a victoria',
        'jos√© ignacio', 'mar√≠a luisa', 'jos√© rafael', 'mar√≠a mercedes', 'jos√© vicente'
      ];
      
      const firstTwoWords = `${words[0].toLowerCase()} ${words[1].toLowerCase()}`;
      
      if (compoundNames.includes(firstTwoWords)) {
        return `${words[0]} ${words[1]}`;
      }
      
      return words[0];
    };

    const firstName = extractFirstName(persona.nombre_contacto || '');
    console.log(`üìù Nombre completo: "${persona.nombre_contacto}" ‚Üí Primer nombre: "${firstName}"`);

    // 2. Llamar al modular agent para componer el email con plantilla
    const composeResponse = await fetch('http://localhost:5003/api/modular-agent/execute-tool', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool: 'llm.compose_email_template',
        params: {
          recipient_name: firstName,
          recipient_company: razonSocial,
          recipient_role: persona.cargo_contacto || ''
        }
      })
    });

    if (!composeResponse.ok) {
      throw new Error('Error al componer el email');
    }

    const composeResult = await composeResponse.json();
    
    console.log(`üìã Resultado de compose:`, composeResult);
    
    if (!composeResult.ok) {
      throw new Error(composeResult.error || 'Error al componer el email');
    }

    console.log(`  ‚úÖ Email compuesto con plantilla`);
    console.log(`üìß Subject: ${composeResult.subject}`);
    console.log(`üìß HTML Content length: ${composeResult.html_content?.length || 'undefined'}`);

    // 3. Enviar el email usando Gmail
    const sendResponse = await fetch('http://localhost:5003/api/modular-agent/execute-tool', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tool: 'gmail.send_email',
        params: {
          to: [persona.email_contacto],
          subject: composeResult.subject,
          html_body: composeResult.html_content  // Cambiado de html_body a html_content
        }
      })
    });

    if (!sendResponse.ok) {
      throw new Error('Error al enviar el email');
    }

    const sendResult = await sendResponse.json();

    if (!sendResult.ok) {
      throw new Error(sendResult.error || 'Error al enviar el email');
    }

    console.log(`  ‚úÖ Email enviado exitosamente a ${persona.email_contacto}`);

    // 4. Actualizar el estado del contacto en Supabase
    const { error: updateError } = await supabase
      .from('personas')
      .update({
        email_sent: true,
        email_sent_at: new Date().toISOString()
      })
      .eq('id', contactId);

    if (updateError) {
      console.error('‚ö†Ô∏è Error actualizando estado del contacto:', updateError);
      // No fallar el proceso completo, solo logear el error
    } else {
      console.log(`  ‚úÖ Estado actualizado: email_sent = true para contacto ${contactId}`);
    }

    return NextResponse.json({
      success: true,
      message: 'Email enviado exitosamente',
      result: {
        to: persona.email_contacto,
        subject: composeResult.subject,
        message_id: sendResult.message_id
      }
    });

  } catch (error: unknown) {
    console.error('‚ùå Error sending intro email:', error);
    const message = error instanceof Error ? error.message : 'Error desconocido';
    
    return NextResponse.json(
      { 
        success: false,
        error: 'Error enviando email de introducci√≥n', 
        details: message 
      },
      { status: 500 }
    );
  }
}



